{"version":3,"sources":["theme.js","component/Register.js","component/utils/Snackbar.js","component/Dashboard.js","component/index.js","App.js","serviceWorker.js","index.js","Events.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","typography","useNextVariants","fontFamily","join","withStyles","_logoText","_headingText","root","leftContainer","Object","defineProperty","display","flexDirection","justifyContent","height","backgroundColor","textAlign","breakpoints","down","rightContainer","logoImage","width","margin","logoText","color","fontSize","fontWeight","background","content","borderRadius","headingText","textField","button","&:hover","props","_useState","useState","_useState2","slicedToArray","username","setUsername","_useState3","_useState4","email","setEmail","inputChangeHandler","event","target","name","value","classes","react_default","a","createElement","react","className","Grid","container","item","xs","sm","lg","Typography","variant","onSubmit","e","preventDefault","register","TextField","label","type","onChange","Button","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","default","openSnackbarFn","MySnackbarContentWrapper","green","dark","amber","icon","iconVariant","opacity","marginRight","spacing","unit","message","alignItems","onClose","other","objectWithoutProperties","Icon","SnackbarContent","assign","classNames","aria-describedby","id","action","IconButton","key","aria-label","close","onClick","Close_default","Notifier","state","open","openSnackbar","_ref","_this","setState","handleSnackbarClose","this","toString","dangerouslySetInnerHTML","__html","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","snackbarcontentprops","style","handleClose","React","Component","_ref2","padding","Dashboard","setMessage","socket","emit","MESSAGE_SENT","chats","map","chat","index","user","SOCKET_URL","Index","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","undefined","USER_CONNECTED","loggedIn","initSocket","on","console","log","concat","MESSAGE_RECEIVED","data","prevState","toConsumableArray","io","utils_Snackbar","component_Dashboard","updateMessages","component_Register","App","MuiThemeProvider","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","USER_DISCONNECTED","TYPING","LOGOUT"],"mappings":"+OAEMA,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,YAGdE,WAAY,CACRC,iBAAiB,EACjBC,WAAY,CACR,OACA,cACFC,KAAK,mHCsJAC,cA7JA,SAAAV,GAAK,IAAAW,EAAAC,EAAA,MAAK,CACrBC,KAAM,GAGNC,cAAcC,OAAAC,EAAA,EAAAD,CAAA,CACVE,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,OAAQ,QACRC,gBAAiB,UACjBC,UAAW,UACVtB,EAAMuB,YAAYC,KAAK,MAAQ,CAC5BJ,OAAQ,SAGhBK,eAAeV,OAAAC,EAAA,EAAAD,CAAA,CACXE,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,OAAQ,QACRE,UAAW,UACVtB,EAAMuB,YAAYC,KAAK,MAAQ,CAC5BJ,OAAQ,SAGhBM,UAAUX,OAAAC,EAAA,EAAAD,CAAA,CACNY,MAAO,QACPP,OAAQ,QACRQ,OAAQ,UACP5B,EAAMuB,YAAYC,KAAK,MAAQ,CAC5BG,MAAO,QACPP,OAAQ,UAGhBS,UAAQlB,EAAA,CACJmB,MAAO,UACPC,SAAU,OACVC,WAAY,OAHRjB,OAAAC,EAAA,EAAAD,CAAAJ,EAIHX,EAAMuB,YAAYC,KAAK,MAAQ,CAC5BO,SAAU,SALVhB,OAAAC,EAAA,EAAAD,CAAAJ,EAOJ,WAAY,CACRM,QAAS,QACTU,MAAO,MACPP,OAAQ,MACRa,WAAY,UACZC,QAAS,MACTN,OAAQ,WACRO,aAAc,QAddxB,GAiBRyB,aAAWxB,EAAA,CACPgB,OAAQ,SACRG,SAAU,OACVC,WAAY,OAHLjB,OAAAC,EAAA,EAAAD,CAAAH,EAINZ,EAAMuB,YAAYC,KAAK,MAAQ,CAC5BO,SAAU,SALPhB,OAAAC,EAAA,EAAAD,CAAAH,EAOP,WAAY,CACRK,QAAS,QACTU,MAAO,MACPP,OAAQ,MACRC,gBAAiB,UACjBa,QAAS,MACTN,OAAQ,WACRO,aAAc,QAdXvB,GAiBXyB,UAAUtB,OAAAC,EAAA,EAAAD,CAAA,CACNY,MAAO,MACPC,OAAQ,UACP5B,EAAMuB,YAAYC,KAAK,MAAQ,CAC5BG,MAAO,QAGfW,OAAQ,CACJV,OAAQ,SACRE,MAAO,UACPT,gBAAiB,UACjBkB,UAAW,CACPT,MAAO,UACPT,gBAAiB,cA4EdX,CAtEE,SAAC8B,GAAU,IAAAC,EAEQC,mBAAS,IAFjBC,EAAA5B,OAAA6B,EAAA,EAAA7B,CAAA0B,EAAA,GAEjBI,EAFiBF,EAAA,GAEPG,EAFOH,EAAA,GAAAI,EAGEL,mBAAS,IAHXM,EAAAjC,OAAA6B,EAAA,EAAA7B,CAAAgC,EAAA,GAGjBE,EAHiBD,EAAA,GAGVE,EAHUF,EAAA,GAKlBG,EAAqB,SAACC,GACE,aAAtBA,EAAMC,OAAOC,KACbR,EAAYM,EAAMC,OAAOE,OAEzBL,EAASE,EAAMC,OAAOE,QAItBC,EAAYhB,EAAZgB,QACR,OACIC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,WAASE,UAAWL,EAAQ3C,MACxB4C,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,WAAS,GACXN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC3BV,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAQ1C,eACpB2C,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,QAAQ,UAMhCZ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC3BV,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAQ/B,gBACpBgC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKR,UAAWL,EAAQpB,aAA5C,YACAqB,EAAAC,EAAAC,cAAA,QAAMW,SAAU,SAACC,GACbA,EAAEC,iBACFhC,EAAMiC,SAAS5B,EAAUI,KAEzBQ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACIC,MAAM,WACNrB,KAAK,WACLsB,KAAK,OACLP,QAAQ,WACRR,UAAWL,EAAQnB,UACnBkB,MAAOV,EACPgC,SAAU1B,IAEdM,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACIC,MAAM,QACNrB,KAAK,QACLsB,KAAK,OACLP,QAAQ,WACRR,UAAWL,EAAQnB,UACnBkB,MAAON,EACP4B,SAAU1B,IAEdM,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQF,KAAK,SAASP,QAAQ,WAAWvC,MAAM,YAAY+B,UAAWL,EAAQlB,QAA9E,6LCxI1ByC,EAAc,CAClBC,QAASC,IACTC,QAASC,IACTC,MAAOC,IACPC,KAAMC,IACNC,QAASD,KAsEX,IAEIE,EAFEC,EAA2BhF,YAnEjB,SAAAV,GAAK,MAAK,CACxBwF,QAAS,CACPnE,gBAAiB,WAEnB2D,QAAS,CACP3D,gBAAiBsE,IAAM,MAEzBP,MAAO,CACL/D,gBAAiBrB,EAAME,QAAQkF,MAAMQ,MAEvCN,KAAM,CACJjE,gBAAiB,WAEnB6D,QAAS,CACP7D,gBAAiBwE,IAAM,MAEzBC,KAAM,CACJ/D,SAAU,IAEZgE,YAAa,CACXC,QAAS,GACTC,YAAajG,EAAMkG,QAAQC,MAE7BC,QAAS,CACPnF,QAAS,OACToF,WAAY,YA0CiB3F,CAtCjC,SAA2B8B,GAAO,IACxBgB,EAA4DhB,EAA5DgB,QAASK,EAAmDrB,EAAnDqB,UAAWuC,EAAwC5D,EAAxC4D,QAASE,EAA+B9D,EAA/B8D,QAASjC,EAAsB7B,EAAtB6B,QAAYkC,EAD1BxF,OAAAyF,EAAA,EAAAzF,CACoCyB,EADpC,uDAE1BiE,EAAO1B,EAAYV,GAEzB,OACEZ,EAAAC,EAAAC,cAAC+C,EAAA,EAAD3F,OAAA4F,OAAA,CACE9C,UAAW+C,IAAWpD,EAAQa,GAAUR,GACxCgD,mBAAiB,kBACjBT,QACE3C,EAAAC,EAAAC,cAAA,QAAMmD,GAAG,kBAAkBjD,UAAWL,EAAQ4C,SAC5C3C,EAAAC,EAAAC,cAAC8C,EAAD,CAAM5C,UAAW+C,IAAWpD,EAAQsC,KAAMtC,EAAQuC,eACjDK,GAGLW,OAAQ,CACNtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CACEC,IAAI,QACJC,aAAW,QACXpF,MAAM,UACN+B,UAAWL,EAAQ2D,MACnBC,QAASd,GAET7C,EAAAC,EAAAC,cAAC0D,EAAA3D,EAAD,CAAWG,UAAWL,EAAQsC,UAG9BS,MAsBJe,6MACJC,MAAQ,CACNC,MAAM,EACNpB,QAAS,GACT/B,QAAS,MAOXoD,aAAe,SAAAC,GAA0B,IAAvBtB,EAAuBsB,EAAvBtB,QAAS/B,EAAcqD,EAAdrD,QACzBsD,EAAKC,SAAS,CACZJ,MAAM,EACNpB,UACA/B,eAIJwD,oBAAsB,SAACzE,GACrBuE,EAAKC,SAAS,CACZJ,MAAM,EACNpB,QAAS,GACT/B,QAASsD,EAAKJ,MAAMlD,8FAftBoB,EAAiBqC,KAAKL,8CAmBf,IACCjE,EAAYsE,KAAKtF,MAAjBgB,QACFa,EAAUyD,KAAKP,MAAMlD,QAAQ0D,WAC7B3B,EACJ3C,EAAAC,EAAAC,cAAA,QACEmD,GAAG,sBACHkB,wBAAyB,CAAEC,OAAQH,KAAKP,MAAMnB,WAIlD,OACE3C,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,SAAUC,WAAY,QAChDC,iBAAkB,IAClBhC,QAASwB,KAAKD,oBACdL,KAAMM,KAAKP,MAAMC,KACjBe,qBAAsB,CACpB1B,mBAAoB,uBAEtBE,OAAQ,CACNtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CACEC,IAAI,QACJC,aAAW,QACXrD,UAAWL,EAAQ2D,MACnBC,QAASU,KAAKD,oBACdW,MAAO,CAAEnH,gBAAiB,cAAeS,MAAO,UAEhD2B,EAAAC,EAAAC,cAAC0D,EAAA3D,EAAD,SAIJD,EAAAC,EAAAC,cAAC+B,EAAD,CACEY,QAASwB,KAAKW,YACdpE,QAASA,EACT+B,QAASA,YA7DIsC,IAAMC,WAwEtB,SAASlB,EAATmB,GAA4C,IAApBxC,EAAoBwC,EAApBxC,QAAS/B,EAAWuE,EAAXvE,QACtCoB,EAAe,CAAEW,UAAS/B,YAGb3D,kBAlFA,SAAAV,GAAK,MAAK,CACvBmH,MAAO,CACL0B,QAAS7I,EAAMkG,QAAU,KAgFdxF,CAAmB4G,WC1HnBwB,EA1CG,SAACtG,GAAU,IAAAC,EAEKC,mBAAS,IAFdC,EAAA5B,OAAA6B,EAAA,EAAA7B,CAAA0B,EAAA,GAElB2D,EAFkBzD,EAAA,GAEToG,EAFSpG,EAAA,GAUzB,OACIc,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,QAAMW,SARU,SAACC,GACrBA,EAAEC,iBACFhC,EAAMwG,OAAOC,KAAKC,eAAc9C,GAChC2C,EAAW,MAMHtF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACIC,MAAM,UACNrB,KAAK,UACLsB,KAAK,OACLP,QAAQ,WAERd,MAAO6C,EACPvB,SAAU,SAACN,GACPwE,EAAWxE,EAAElB,OAAOE,UAG5BE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQF,KAAK,SAASP,QAAQ,WAAWvC,MAAM,aAA/C,SAIAU,EAAM2G,MAAMC,IAAI,SAACC,EAAMC,GACnB,OACI7F,EAAAC,EAAAC,cAAA,OAAKsD,IAAKqC,GACN7F,EAAAC,EAAAC,cAAA,SAAI0F,EAAKjD,SACT3C,EAAAC,EAAAC,cAAA,SAAI0F,EAAKE,KAAK1G,gCCpCpC2G,GAAa,QA+DJC,eA5DX,SAAAA,EAAYjH,GAAO,IAAAmF,EAAA,OAAA5G,OAAA2I,EAAA,EAAA3I,CAAA+G,KAAA2B,IACf9B,EAAA5G,OAAA4I,EAAA,EAAA5I,CAAA+G,KAAA/G,OAAA6I,EAAA,EAAA7I,CAAA0I,GAAAI,KAAA/B,KAAMtF,KASViC,SAAW,SAAC5B,EAAUI,GAClB,GAAiB,KAAbJ,QAAgCiH,IAAbjH,GAAuC,OAAbA,EAC7C4E,EAAa,CAAErB,QAAS,wBAAyB/B,QAAS,cACvD,GAAc,KAAVpB,QAA0B6G,IAAV7G,GAAiC,OAAVA,EAC9CwE,EAAa,CAAErB,QAAS,wBAAyB/B,QAAS,aACvD,CACH,IAAMkF,EAAO,CACT1G,SAAUA,EACVI,MAAOA,GAEX0E,EAAKqB,OAAOC,KAAKc,iBAAgBR,GACjC5B,EAAKC,SAAS,CACVoC,UAAU,MAtBHrC,EAgCnBsC,WAAa,WACTtC,EAAKqB,OAAOkB,GAAG,UAAW,WACtBC,QAAQC,IAAR,wBAAAC,OAAoC1C,EAAKqB,OAAOlC,OAGpDa,EAAKqB,OAAOkB,GAAGI,mBAAkB,SAACC,GAC9B5C,EAAKC,SAAS,SAAC4C,GACX,MAAO,CACHrB,MAAK,GAAAkB,OAAAtJ,OAAA0J,EAAA,EAAA1J,CAAMyJ,EAAUrB,OAAhB,CAAuBoB,UAtCxC5C,EAAKJ,MAAQ,CACTyB,OAAQ,KACRgB,UAAU,EACVb,MAAO,IAEXxB,EAAKqB,OAAS0B,IAAGlB,IAPF7B,mFA+CfG,KAAKmC,8CAIL,OACIxG,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAACgH,EAAD,MACC7C,KAAKP,MAAMyC,SAAWvG,EAAAC,EAAAC,cAACiH,EAAD,CAAW5B,OAAQlB,KAAKkB,OAAQG,MAAOrB,KAAKP,MAAM4B,MAAO0B,eAAgB/C,KAAK+C,iBAAqBpH,EAAAC,EAAAC,cAACmH,EAAD,CAAUrG,SAAUqD,KAAKrD,SAAUuE,OAAQlB,KAAKP,MAAMyB,iBAvD5KL,aCKLoC,OAVf,WACE,OACEtH,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CAAkBhL,MAAOA,GACvByD,EAAAC,EAAAC,cAACsH,GAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/H,EAAAC,EAAAC,cAAC8H,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iCEnInBC,EAAOC,QAAU,CACbjD,aAAc,eACdoB,iBAAkB,mBAClBP,eAAgB,iBAChBqC,kBAAmB,oBACnBC,OAAQ,SACRC,OAAQ","file":"static/js/main.af23ed13.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#f7f7f7\"\r\n        },\r\n        secondary: {\r\n            main: \"#222222\"\r\n        }\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n        fontFamily: [\r\n            'Lato',\r\n            'sans-serif',\r\n        ].join(\",\")\r\n    }\r\n});\r\n\r\nexport {\r\n    theme,\r\n}","import React, { Fragment, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n\r\n    },\r\n    leftContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        height: '100vh',\r\n        backgroundColor: \"#000000\",\r\n        textAlign: 'center',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '50vh'\r\n        }\r\n    },\r\n    rightContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        height: '100vh',\r\n        textAlign: 'center',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '50vh'\r\n        }\r\n    },\r\n    logoImage: {\r\n        width: '300px',\r\n        height: '300px',\r\n        margin: '10px 0',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '200px',\r\n            height: '200px',\r\n        }\r\n    },\r\n    logoText: {\r\n        color: '#FFFFFF',\r\n        fontSize: '50px',\r\n        fontWeight: '700',\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: '40px',\r\n        },\r\n        '&::after': {\r\n            display: 'block',\r\n            width: '4em',\r\n            height: '3px',\r\n            background: '#51e3d4',\r\n            content: '\" \"',\r\n            margin: '5px auto',\r\n            borderRadius: '2px'\r\n        }\r\n    },\r\n    headingText: {\r\n        margin: '10px 0',\r\n        fontSize: '30px',\r\n        fontWeight: '400',\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: '25px',\r\n        },\r\n        '&::after': {\r\n            display: 'block',\r\n            width: '2em',\r\n            height: '3px',\r\n            backgroundColor: '#ff9933',\r\n            content: '\" \"',\r\n            margin: '2px auto',\r\n            borderRadius: '2px'\r\n        }\r\n    },\r\n    textField: {\r\n        width: '40%',\r\n        margin: '10px 0',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '70%',\r\n        }\r\n    },\r\n    button: {\r\n        margin: '10px 0',\r\n        color: '#FFFFFF',\r\n        backgroundColor: '#ff9933',\r\n        '&:hover': {\r\n            color: '#FFFFFF',\r\n            backgroundColor: '#e67300'\r\n        }\r\n    }\r\n});\r\n\r\n\r\nconst Register = (props) => {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n\r\n    const inputChangeHandler = (event) => {\r\n        if (event.target.name === 'username') {\r\n            setUsername(event.target.value);\r\n        } else {\r\n            setEmail(event.target.value);\r\n        }\r\n    }\r\n\r\n    const { classes } = props;\r\n    return (\r\n        <Fragment>\r\n            <section className={classes.root}>\r\n                <Grid container>\r\n                    <Grid item xs={12} sm={12} lg={6}>\r\n                        <div className={classes.leftContainer}>\r\n                            <div>\r\n                                {/* <img src={} alt=\"Logo\" className={classes.logoImage}></img> */}\r\n                                <Typography variant=\"h5\">\r\n                                    {/* <span className={classes.logoText}>Chat App</span> */}\r\n                                </Typography>\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} lg={6}>\r\n                        <div className={classes.rightContainer}>\r\n                            <Typography variant=\"h5\" className={classes.headingText}>Register</Typography>\r\n                            <form onSubmit={(e) => {\r\n                                e.preventDefault();\r\n                                props.register(username, email);\r\n                            }}>\r\n                                <TextField\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    type=\"text\"\r\n                                    variant=\"outlined\"\r\n                                    className={classes.textField}\r\n                                    value={username}\r\n                                    onChange={inputChangeHandler}\r\n                                />\r\n                                <br />\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    type=\"text\"\r\n                                    variant=\"outlined\"\r\n                                    className={classes.textField}\r\n                                    value={email}\r\n                                    onChange={inputChangeHandler}\r\n                                />\r\n                                <br />\r\n                                <Button type=\"submit\" variant=\"outlined\" color=\"secondary\" className={classes.button}>\r\n                                    Submit</Button>\r\n                            </form>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </section>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nRegister.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(Register);","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport classNames from 'classnames';\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon,\r\n  default: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n  default: {\r\n    backgroundColor: '#333333',\r\n  },\r\n  success: {\r\n    backgroundColor: green[800],\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark,\r\n  },\r\n  info: {\r\n    backgroundColor: '#07456f',\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700],\r\n  },\r\n  icon: {\r\n    fontSize: 20,\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n  message: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n  const { classes, className, message, onClose, variant, ...other } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={classNames(classes[variant], className)}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={\r\n        <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n      }\r\n      action={[\r\n        <IconButton\r\n          key=\"close\"\r\n          aria-label=\"Close\"\r\n          color=\"inherit\"\r\n          className={classes.close}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>,\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nMySnackbarContent.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  message: PropTypes.node,\r\n  onClose: PropTypes.func,\r\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info', 'default']).isRequired,\r\n};\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\nlet openSnackbarFn;\r\nconst styles = theme => ({\r\n  close: {\r\n    padding: theme.spacing / 2,\r\n  },\r\n});\r\n\r\nclass Notifier extends React.Component {\r\n  state = {\r\n    open: false,\r\n    message: '',\r\n    variant: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    openSnackbarFn = this.openSnackbar;\r\n  }\r\n\r\n  openSnackbar = ({ message, variant }) => {\r\n    this.setState({\r\n      open: true,\r\n      message,\r\n      variant,\r\n    });\r\n  };\r\n\r\n  handleSnackbarClose = (event) => {\r\n    this.setState({\r\n      open: false,\r\n      message: '',\r\n      variant: this.state.variant\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const variant = this.state.variant.toString();\r\n    const message = (\r\n      <span\r\n        id=\"snackbar-message-id\"\r\n        dangerouslySetInnerHTML={{ __html: this.state.message }}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <Snackbar\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\r\n        autoHideDuration={5000}\r\n        onClose={this.handleSnackbarClose}\r\n        open={this.state.open}\r\n        snackbarcontentprops={{\r\n          'aria-describedby': 'snackbar-message-id',\r\n        }}\r\n        action={[\r\n          <IconButton\r\n            key=\"close\"\r\n            aria-label=\"Close\"\r\n            className={classes.close}\r\n            onClick={this.handleSnackbarClose}\r\n            style={{ backgroundColor: 'transparent', color: \"white\" }}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>,\r\n        ]}\r\n      >\r\n        <MySnackbarContentWrapper\r\n          onClose={this.handleClose}\r\n          variant={variant}\r\n          message={message}\r\n        />\r\n      </Snackbar>\r\n    );\r\n  }\r\n}\r\n\r\nNotifier.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport function openSnackbar({ message, variant }) {\r\n  openSnackbarFn({ message, variant });\r\n}\r\n\r\nexport default withStyles(styles)(Notifier);","import React, { useState, Fragment } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar, { openSnackbar } from './utils/Snackbar';\r\n\r\nimport { MESSAGE_SENT } from '../Events';\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n    const onMessageSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.socket.emit(MESSAGE_SENT, message);\r\n        setMessage(\"\");\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={onMessageSubmit}>\r\n                <TextField\r\n                    label=\"Message\"\r\n                    name=\"message\"\r\n                    type=\"text\"\r\n                    variant=\"outlined\"\r\n                    // className={classes.textField}\r\n                    value={message}\r\n                    onChange={(e) => {\r\n                        setMessage(e.target.value);\r\n                    }}\r\n                />\r\n                <br />\r\n                <Button type=\"submit\" variant=\"outlined\" color=\"secondary\">Send</Button>\r\n            </form>\r\n\r\n            {\r\n                props.chats.map((chat, index) => {\r\n                    return (\r\n                        <div key={index}>\r\n                            <p>{chat.message}</p>\r\n                            <p>{chat.user.username}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React, { Fragment, Component } from 'react';\r\nimport Register from './Register';\r\nimport Dashboard from './Dashboard';\r\nimport Snackbar, { openSnackbar } from './utils/Snackbar';\r\n\r\nimport io from 'socket.io-client';\r\nimport { USER_CONNECTED, USER_DISCONNECTED, LOGOUT, MESSAGE_RECEIVED } from '../Events';\r\n\r\nconst SOCKET_URL = \":5001\";\r\n\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            socket: null,\r\n            loggedIn: false,\r\n            chats: []\r\n        }\r\n        this.socket = io(SOCKET_URL);\r\n    }\r\n\r\n    register = (username, email) => {\r\n        if (username === '' || username === undefined || username === null) {\r\n            openSnackbar({ message: \"Please enter username\", variant: \"info\" });\r\n        } else if (email === '' || email === undefined || email === null) {\r\n            openSnackbar({ message: \"Please enter password\", variant: \"info\" });\r\n        } else {\r\n            const user = {\r\n                username: username,\r\n                email: email\r\n            }\r\n            this.socket.emit(USER_CONNECTED, user);\r\n            this.setState({\r\n                loggedIn: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /* logout = () => {\r\n       socket.emit(LOGOUT);\r\n       setLogin(false);\r\n   } */\r\n\r\n    initSocket = () => {\r\n        this.socket.on('connect', () => {\r\n            console.log(`Connected SocketId - ${this.socket.id}`);\r\n        });\r\n\r\n        this.socket.on(MESSAGE_RECEIVED, (data) => {\r\n            this.setState((prevState) => {\r\n                return {\r\n                    chats: [...prevState.chats, data]\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initSocket();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Snackbar />\r\n                {this.state.loggedIn ? <Dashboard socket={this.socket} chats={this.state.chats} updateMessages={this.updateMessages} /> : <Register register={this.register} socket={this.state.socket} />}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;","import React, { Fragment } from 'react';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { theme } from './theme';\r\nimport Index from './component/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <Fragment>\r\n      <MuiThemeProvider theme={theme}>\r\n        <Index />\r\n      </MuiThemeProvider>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = {\r\n    MESSAGE_SENT: \"MESSAGE_SENT\",\r\n    MESSAGE_RECEIVED: \"MESSAGE_RECEIVED\",\r\n    USER_CONNECTED: \"USER_CONNECTED\",\r\n    USER_DISCONNECTED: \"USER_DISCONNECTED\",\r\n    TYPING: \"TYPING\",\r\n    LOGOUT: \"LOGOUT\"\r\n}"],"sourceRoot":""}